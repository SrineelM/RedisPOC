package com.redis.poc.streams;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.redis.connection.stream.RecordId;
import org.springframework.data.redis.connection.stream.MapRecord;
import org.springframework.data.redis.core.StringRedisTemplate;
import java.util.Map;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Service;

@Service
@Slf4j
public class OrderEventProducer {

    private final RedisTemplate<String, Object> redisTemplate;
    private final StringRedisTemplate stringRedisTemplate;
    private static final String STREAM_KEY = "orders";
    @Value("${redis.stream.orders.max-length:1000}")
    private long maxLength;

    public OrderEventProducer(RedisTemplate<String, Object> redisTemplate, StringRedisTemplate stringRedisTemplate) {
        this.redisTemplate = redisTemplate;
        this.stringRedisTemplate = stringRedisTemplate;
    }

    /**
     * Publishes an order event to the Redis Stream.
     * Best Practice: Returns the RecordId generated by Redis, which is crucial for client-side tracking.
     * @param event The order event to publish.
     * @return The unique RecordId of the message in the stream.
     */
    public RecordId publishOrderEvent(OrderEvent event) {
        log.info("Publishing order event: {}", event);
        MapRecord<String, Object, Object> record = MapRecord.create(STREAM_KEY, Map.of(
                "id", event.id(),
                "customer", event.customer(),
                "amount", event.amount()
        ));
        // Append event
    RecordId id = redisTemplate.opsForStream().add(record);
    try { stringRedisTemplate.opsForValue().set("orders:lastId", id.getValue()); } catch (Exception ignore) {}
        // Hard trim with approximate MAXLEN (~) to keep size near maxLength (configurable)
        try {
            redisTemplate.opsForStream().trim(STREAM_KEY, maxLength, true);
        } catch (Exception e) {
            log.debug("Stream trim failed: {}", e.getMessage());
        }
        return id;
    }
}
