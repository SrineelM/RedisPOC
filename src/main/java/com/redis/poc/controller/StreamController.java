package com.redis.poc.controller;

import com.redis.poc.streams.OrderEvent;
import com.redis.poc.streams.OrderEventProducer;
import org.springframework.data.redis.connection.stream.RecordId;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.Map;

@RestController
@RequestMapping("/api/streams")
public class StreamController {

    private final OrderEventProducer orderEventProducer;

    public StreamController(OrderEventProducer orderEventProducer) {
        this.orderEventProducer = orderEventProducer;
    }

    /**
     * Endpoint to publish a new order event to the Redis Stream.
     * Best Practice: Returns the unique message ID generated by Redis.
     * @param event The order event to be published.
     * @return A confirmation message including the stream message ID.
     */
    @PostMapping("/publish")
    public ResponseEntity<Map<String, String>> publishOrderEvent(@RequestBody OrderEvent event) {
        RecordId recordId = orderEventProducer.publishOrderEvent(event);
        return ResponseEntity.ok(Map.of(
                "status", "event published",
                "messageId", recordId.getValue()
        ));
    }
}
