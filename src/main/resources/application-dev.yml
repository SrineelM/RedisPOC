# Configuration for the 'dev' profile, intended for local development.
spring:
  # H2 Database Configuration for local development
  datasource:
    url: jdbc:h2:mem:testdb # In-memory database, data is lost on application restart
    driver-class-name: org.h2.Driver
    username: sa
    password: ''
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    hibernate:
      ddl-auto: update # Automatically updates the database schema based on entities
    show-sql: true # Logs SQL statements to the console for debugging

  # Redis Configuration for local development
  redis:
    host: localhost
    port: 6379
    # No password for local Redis by default. If you have one, add it here.
    # password: your-local-redis-password
    stream:
      product-events: product:events:stream
      orders:
        max-length: 1000
        idempotency-ttl-seconds: 3600

eventstoredb:
  uri: esdb://localhost:2113?tls=false
  username: admin
  password: changeit

  # Cache Configuration
  cache:
    type: redis # Use Redis for caching
    cache-names: # Pre-define cache names for better organization
      - products
      - product-details

# Rate Limiting Configuration
# These values are used by the RateLimitInterceptor
ratelimit:
  capacity: 10 # Max number of requests
  rate: 5 # How many tokens are added per refill period
  refill-period: 1s # The time it takes to add 'rate' tokens
  paths: /api/ratelimit/** # Paths to apply rate limiting to
  excluded-paths: /api/public/** # Paths to exclude from rate limiting

# Resilience4j Configuration
resilience4j:
  circuitbreaker:
    instances:
      redis-resilience:
        sliding-window-type: count-based
        sliding-window-size: 10
        failure-rate-threshold: 50
        wait-duration-in-open-state: 10s
        permitted-number-of-calls-in-half-open-state: 3
        minimum-number-of-calls: 5
        record-exceptions:
          - io.lettuce.core.RedisConnectionException
          - io.lettuce.core.RedisCommandTimeoutException
          - java.util.concurrent.TimeoutException
  bulkhead:
    instances:
      redis-resilience:
        max-concurrent-calls: 2
        max-wait-duration: 0ms
  timelimiter:
    instances:
      redis-resilience:
        timeout-duration: 2s
        cancel-running-future: true
  retry:
    instances:
      redis-resilience:
        max-attempts: 3
        wait-duration: 1s
        exponential-backoff-multiplier: 2
        retry-exceptions:
          - io.lettuce.core.RedisConnectionException
          - io.lettuce.core.RedisCommandTimeoutException
          - java.util.concurrent.TimeoutException

# JWT Configuration
jwt:
  secret: myVerySecretKeyThatShouldBeAtLeast256BitsLongForHS256Algorithm
  expiration: 3600
  revocation-namespace: dev

product:
  events:
    idempotency-ttl-seconds: 86400

security:
  auth:
    login:
      fail-threshold: 5
      lockout-seconds: 300

# Management and Monitoring
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always
  metrics:
    export:
      prometheus:
        enabled: true
  tracing:
    sampling:
      probability: 1.0
