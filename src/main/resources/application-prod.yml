# Configuration for the 'prod' profile, intended for production environments.
spring:
  # PostgreSQL Database Configuration for production
  datasource:
    # Use environment variables for connection details to avoid hardcoding credentials.
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:appdb}
    username: ${DB_USER:appuser}
    password: ${DB_PASSWORD:secret}
    driver-class-name: org.postgresql.Driver
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: validate # Validates the schema, fails on mismatch. Safer for production.

  # Redis Configuration for production
  redis:
    host: ${REDIS_HOST:localhost}
    port: ${REDIS_PORT:6379}
    password: ${REDIS_PASSWORD:secret} # Always use a password in production
    ssl:
      enabled: true # Enable SSL for secure communication with Redis in production
    timeout: 3s
    connect-timeout: 5s
    lettuce:
      pool:
        max-active: 20
        max-idle: 10
        min-idle: 2
        max-wait: 3s
    stream:
      product-events: product:events:stream
      orders:
        max-length: 5000
        idempotency-ttl-seconds: 3600

eventstoredb:
  uri: ${EVENTSTOREDB_URI:esdb://localhost:2113?tls=true}
  username: ${EVENTSTOREDB_USER:admin}
  password: ${EVENTSTOREDB_PASSWORD:changeit}

  # Cache Configuration for production
  cache:
    type: redis
    cache-names:
      - products
      - product-details

# Rate Limiting Configuration for production
ratelimit:
  capacity: 100
  rate: 50
  refill-period: 1m
  paths: /api/**
  excluded-paths: /actuator/**,/api/public/**

# JWT Configuration for production
jwt:
  secret: ${JWT_SECRET:myVerySecretKeyThatShouldBeAtLeast256BitsLongForHS256Algorithm}
  expiration: ${JWT_EXPIRATION:3600}
  revocation-namespace: prod

product:
  events:
    idempotency-ttl-seconds: 172800

security:
  auth:
    login:
      fail-threshold: 10
      lockout-seconds: 900

# Resilience4j Configuration for production
resilience4j:
  circuitbreaker:
    instances:
      redis-resilience:
        sliding-window-type: count-based
        sliding-window-size: 20
        failure-rate-threshold: 30
        wait-duration-in-open-state: 30s
        permitted-number-of-calls-in-half-open-state: 5
        minimum-number-of-calls: 10
        record-exceptions:
          - io.lettuce.core.RedisConnectionException
          - io.lettuce.core.RedisCommandTimeoutException
          - java.util.concurrent.TimeoutException
  bulkhead:
    instances:
      redis-resilience:
        max-concurrent-calls: 10
        max-wait-duration: 1s
  timelimiter:
    instances:
      redis-resilience:
        timeout-duration: 5s
        cancel-running-future: true
  retry:
    instances:
      redis-resilience:
        max-attempts: 5
        wait-duration: 2s
        exponential-backoff-multiplier: 2
        retry-exceptions:
          - io.lettuce.core.RedisConnectionException
          - io.lettuce.core.RedisCommandTimeoutException
          - java.util.concurrent.TimeoutException

# Management and Monitoring for production
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: when-authorized
  metrics:
    export:
      prometheus:
        enabled: true
  tracing:
    sampling:
      probability: 0.1  # Sample 10% in production

# Logging configuration
logging:
  level:
    com.redis.poc: INFO
    io.lettuce: WARN
    org.springframework.security: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level [%X{traceId:-},%X{spanId:-}] %logger{36} - %msg%n"
