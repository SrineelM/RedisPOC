# ===============================================================================
# application-prod.yml
# -------------------------------------------------------------------------------
# Profile: prod (production)
# Usage: Activated when spring.profiles.active=prod or SPRING_PROFILES_ACTIVE=prod
# Purpose: Production deployment with Redis cluster and PostgreSQL DB.
# -------------------------------------------------------------------------------
# Best Practice: Use environment variables for secrets and connection info. Never hardcode secrets.
# ===============================================================================
spring:
  # ---------------------------------------------------------------------------
  # PostgreSQL Database Configuration (production)
  # ---------------------------------------------------------------------------
  datasource:
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:appdb} # Use env vars for DB connection.
    username: ${DB_USER:appuser}
    password: ${DB_PASSWORD:secret}
    driver-class-name: org.postgresql.Driver
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: validate # Validate schema only. Never auto-update in prod.

  # ---------------------------------------------------------------------------
  # Redis Configuration (cluster, production)
  # ---------------------------------------------------------------------------
  redis:
    host: ${REDIS_HOST:localhost} # Use env vars for Redis host.
    port: ${REDIS_PORT:6379}
    password: ${REDIS_PASSWORD:secret} # Always set a password in production.
    ssl:
      enabled: true # Enable SSL for secure Redis communication.
    timeout: 3s
    connect-timeout: 5s
    lettuce:
      pool:
        max-active: 20 # Connection pool settings for high concurrency.
        max-idle: 10
        min-idle: 2
        max-wait: 3s
    stream:
      product-events: product:events:stream # Stream key for product events.
      orders:
        max-length: 5000 # Higher max length for production scale.
        idempotency-ttl-seconds: 3600 # TTL for idempotency keys.

# -------------------------------------------------------------------------------
# EventStoreDB Configuration (production)
# -------------------------------------------------------------------------------
eventstoredb:
  uri: ${EVENTSTOREDB_URI:esdb://localhost:2113?tls=true} # Use env vars for URI.
  username: ${EVENTSTOREDB_USER:admin}
  password: ${EVENTSTOREDB_PASSWORD:changeit}

  # ---------------------------------------------------------------------------
  # Cache Configuration (production)
  # ---------------------------------------------------------------------------
  cache:
    type: redis # Use Redis for distributed caching.
    cache-names:
      - products
      - product-details

# -------------------------------------------------------------------------------
# Rate Limiting Configuration (production)
# -------------------------------------------------------------------------------
# Used by RateLimitInterceptor. Prevents abuse in production.
ratelimit:
  capacity: 100 # Higher capacity for production traffic.
  rate: 50 # Tokens added per refill period.
  refill-period: 1m # Refill period in minutes.
  paths: /api/** # Apply rate limiting to all API endpoints.
  excluded-paths: /actuator/**,/api/public/** # Exclude health and public endpoints.

# -------------------------------------------------------------------------------
# JWT Configuration (production)
# -------------------------------------------------------------------------------
# Use environment variable for secret. NEVER hardcode in production.
jwt:
  secret: ${JWT_SECRET:myVerySecretKeyThatShouldBeAtLeast256BitsLongForHS256Algorithm}
  expiration: ${JWT_EXPIRATION:3600} # Token expiration in seconds.
  revocation-namespace: prod # Namespace for production token revocation.

product:
  events:
    idempotency-ttl-seconds: 172800 # Longer TTL for production event idempotency.

security:
  auth:
    login:
      fail-threshold: 10 # Higher threshold for production.
      lockout-seconds: 900 # Longer lockout duration.

# -------------------------------------------------------------------------------
# Resilience4j Configuration (production)
# -------------------------------------------------------------------------------
# Circuit breaker, bulkhead, time limiter, and retry for Redis operations.
resilience4j:
  circuitbreaker:
    instances:
      redis-resilience:
        sliding-window-type: count-based
        sliding-window-size: 20
        failure-rate-threshold: 30
        wait-duration-in-open-state: 30s
        permitted-number-of-calls-in-half-open-state: 5
        minimum-number-of-calls: 10
        record-exceptions:
          - io.lettuce.core.RedisConnectionException
          - io.lettuce.core.RedisCommandTimeoutException
          - java.util.concurrent.TimeoutException
  bulkhead:
    instances:
      redis-resilience:
        max-concurrent-calls: 10
        max-wait-duration: 1s
  timelimiter:
    instances:
      redis-resilience:
        timeout-duration: 5s
        cancel-running-future: true
  retry:
    instances:
      redis-resilience:
        max-attempts: 5
        wait-duration: 2s
        exponential-backoff-multiplier: 2
        retry-exceptions:
          - io.lettuce.core.RedisConnectionException
          - io.lettuce.core.RedisCommandTimeoutException
          - java.util.concurrent.TimeoutException

# -------------------------------------------------------------------------------
# Management and Monitoring (production)
# -------------------------------------------------------------------------------
# Exposes health, metrics, and tracing endpoints for production monitoring.
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus # Expose these endpoints.
  endpoint:
    health:
      show-details: when-authorized # Restrict health details in prod.
  metrics:
    export:
      prometheus:
        enabled: true # Enable Prometheus metrics for production.
  tracing:
    sampling:
      probability: 0.1 # Sample 10% of traces in production.

# -------------------------------------------------------------------------------
# Logging configuration (production)
# -------------------------------------------------------------------------------
logging:
  level:
    com.redis.poc: INFO # Set log level for application package.
    io.lettuce: WARN # Reduce noise from Redis client.
    org.springframework.security: WARN # Reduce noise from Spring Security.
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level [%X{traceId:-},%X{spanId:-}] %logger{36} - %msg%n"

# ===============================================================================
